#!/usr/bin/env ruby

require 'dishiz'

simname = ARGV[0]

extensions = %w[
  init
  components
  net
]

extensions.each do |x|
  fname = "#{simname}.#{x}"
  next if File.exists?(fname)
  puts "'#{fname}' not found"
  exit(1)
end

componentset = Dishiz::ComponentSet.new
lines = File.read("#{simname}.components").split("\n")
lines.each do |x|
  toks = x.split(' ')
  name = toks[0]
  type = toks[1]
  delay = toks[2]
  c = Dishiz::Component.new(name, type, {
    delay: Dishiz::TimeExpr.new(delay || '1ns').ps
  })

  componentset.add_component(name, c)
end

network = {}
lines = File.read("#{simname}.net").split("\n")
lines.each do |x|
  toks = x.split(' ')
  pin = toks[0]
  nodename = toks[1]

  network[nodename] ||= Dishiz::Node.new(nodename)
  network[nodename].add(pin)

  componentset.assign_pin(pin, nodename)
end

platform = Dishiz::SimulationPlatform.new(componentset, network)

is = platform.init_state
puts is.to_s
# p componentset.single_lead_components
